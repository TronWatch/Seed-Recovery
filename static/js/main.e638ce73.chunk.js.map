{"version":3,"sources":["index.js"],"names":["App","_getPrototypeOf2","_this","_classCallCheck","this","_len","arguments","length","args","Array","_key","_possibleConstructorReturn","_getPrototypeOf","call","apply","concat","state","words","fill","publicKey","unknown","running","error","found","status","_this2","some","word","index","wordList__WEBPACK_IMPORTED_MODULE_2__","includes","setState","lowerCaseWord","toLowerCase","replace","checkForErrors","transformedAddress","_this3","map","_","x","inputs","y","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","type","value","placeholder","key","onChange","_ref","target","handleWordChange","disabled","className","tabIndex","_this4","options","_ref2","handleUnknownChange","_this5","setTimeout","i","console","log","address","tron_http_tools__WEBPACK_IMPORTED_MODULE_3___default","accounts","accountFromMnemonicString","join","startSearch","_this6","classes","push","onClick","start","_this7","_ref3","handleAddressChange","renderUnknownChoice","renderInputs","renderButton","Component","react_dom__WEBPACK_IMPORTED_MODULE_1___default","render","document","getElementById"],"mappings":"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","file":"static/js/main.e638ce73.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport wordList from 'wordList';\nimport TronTools from 'tron-http-tools';\n\nimport 'index.css';\n\nclass App extends React.Component {\n    constructor(...args) {\n        super(...args);\n\n        this.state = {\n            words: new Array(24).fill(''),\n            publicKey: '',\n            unknown: 0,\n            running: false,\n            error: false,\n            found: false,\n            status: 'Waiting for valid input'\n        };\n    }\n\n    checkForErrors() {\n        let error = this.state.words.some((word, index) => this.state.unknown !== index && !wordList.includes(word));\n        let status = 'Waiting for valid input';\n\n        if(this.state.publicKey.length !== 34)\n            error = true;\n\n        if(!error)\n            status = 'Waiting for user to start';\n\n        this.setState({\n            found: false,\n            error,\n            status\n        });\n    }\n\n    handleWordChange(word, index) {\n        const lowerCaseWord = word.toLowerCase().replace(/[^a-z]/g, '');\n\n        const { words } = this.state;\n        words[index] = lowerCaseWord;\n\n        this.setState({\n            words\n        });\n\n        this.checkForErrors();\n    }\n\n    handleUnknownChange(index) {\n        const { words } = this.state;\n        let { unknown } = this.state;\n\n        words[index] = '';\n        unknown = +index;\n\n        this.setState({\n            words,\n            unknown\n        });\n\n        this.checkForErrors();\n    }\n\n    handleAddressChange(publicKey) {\n        const transformedAddress = publicKey.replace(/[^\\w]/g, '');\n\n        this.setState({\n            publicKey: transformedAddress\n        });\n\n        this.checkForErrors();\n    }\n\n    renderInputs() {\n        return new Array(12).fill(0).map((_, x) => {\n            const inputs = [ 0, 12 ].map(y => {\n                const index = x + y;\n                const word = this.state.words[index];\n\n                return (\n                    <input\n                        type='text'\n                        value={ word }\n                        placeholder={ `Word ${index + 1}` }\n                        key={ index }\n                        onChange={ ({ target: { value } }) => this.handleWordChange(value, index) }\n                        disabled={ this.state.unknown === index || this.state.running }\n                        className={ (!wordList.includes(word) && this.state.unknown !== index) ? 'invalid' : 'valid' }\n                        tabIndex={ index + 2 } />\n                );\n            });\n\n            return (\n                <div className='input-row' key={ x }>\n                    { inputs }\n                </div>\n            );\n        });\n    }\n\n    renderUnknownChoice() {\n        const options = this.state.words.map((_, index) => (\n            <option value={ index } key={ index }>Missing word { index + 1 }</option>\n        ));\n\n        return (\n            <select\n                value={ this.state.unknown }\n                onChange={ ({ target: { value } }) => this.handleUnknownChange(value) }\n                tabIndex={ 1 }\n                disabled={ this.state.running }>\n                { options }\n            </select>\n        );\n    }\n\n    start() {\n        this.setState({\n            running: true,\n            status: 'Searching for missing word. This may take some time'\n        });\n\n        const startSearch = () => {\n            for(let i = 0; i < wordList.length; i++) {\n                const word = wordList[i];\n                const words = [ ...this.state.words ];\n\n                words[this.state.unknown] = word;\n\n                console.log(`Checking word ${i + 1} of ${wordList.length}: ${word}`);\n\n                const { address } = TronTools.accounts.accountFromMnemonicString(words.join(' '));\n\n                console.log(`Word ${word} yielded address ${address}`);\n\n                if(address !== this.state.publicKey)\n                    continue;\n\n                this.setState({\n                    status: `Found missing word: ${word}`,\n                    running: false,\n                    found: word,\n                    words\n                });\n\n                break;\n            }\n        };\n\n        setTimeout(() => {\n            startSearch();\n        }, 100);\n    }\n\n    renderButton() {\n        const classes = [ 'button' ];\n\n        if(this.state.running || this.state.error)\n            classes.push('disabled');\n        else classes.push('start');\n\n        return (\n            <div className={ classes.join(' ') } onClick={ () => !classes.includes('disabled') && !this.state.found && this.start() } tabIndex={ 27 }>\n                { 'Start' }\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <div className='container'>\n                <div className='header'>\n                    <div className='header-text'>\n                        <h1>Tron Bip39 Seed Recovery</h1>\n                        <p>\n                            This utility enables you to recover a missing word in your recovery phrase (mnemonic seed).\n\n                            Enter your address and select the missing word below. Fill in the rest of the words that you\n                            have access to and press run.\n\n                            It can take a few minutes depending on your hardware. Please be patient.\n                        </p>\n                    </div>\n                    <div className='input-row'>\n                        <input\n                            type='text'\n                            placeholder='Account address'\n                            value={ this.state.publicKey }\n                            onChange={ ({ target: { value } }) => this.handleAddressChange(value) }\n                            className={ (this.state.publicKey.length !== 34) ? 'invalid' : '' }\n                            tabIndex={ 0 }\n                            disabled={ this.state.running } />\n                        { this.renderUnknownChoice() }\n                    </div>\n                </div>\n\n                { this.renderInputs() }\n\n                <div className='footer'>\n                    <div className='status'>\n                        { this.state.status }\n                    </div>\n                    { this.renderButton() }\n                </div>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}